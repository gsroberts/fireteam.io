@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@@model @GetEnumerableTypeExpression(Model.ViewDataTypeName)

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
        //    PushIndent("    ");
    }

    @:<div class="row">
    @:<div class="col-md-8">
    @:<div class="card">
    @:<div class="card-header card-header-icon" data-background-color="rose">
        @:<i class="material-icons">dashboard</i>
    @:</div>
    @:<div class="card-content">
    @:<h4 class="card-title">List @Model.ViewDataTypeShortName -
        @:<small class="category"></small>
    @:</h4>

@:<p>
    @:<a asp-action="Create">Create New</a>
@:</p>
    @:<table class="table">
    @:<thead>
    @:<tr>

    IEnumerable<PropertyMetadata> properties = Model.ModelMetadata.Properties;
    foreach (var property in properties)
    {
        if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey)
        {
            <th>
                @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
            </th>
        }
    }
    foreach (var navigation in Model.ModelMetadata.Navigations)
    {
        <th>
            @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
        </th>
    }
    @:<th></th>
    @:</tr>
    @:</thead>
    @:<tbody>
    @:@@foreach (var item in Model) {
    @:<tr>
    foreach (PropertyMetadata property in properties)
    {
        if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey)
        {
            <td>
                @@Html.DisplayFor(modelItem => item.@GetValueExpression(property))
            </td>
        }
    }
    foreach (var navigation in Model.ModelMetadata.Navigations)
    {
        <td>
            @@Html.DisplayFor(modelItem => item.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
        </td>
    }
    string pkName = GetPrimaryKeyName();
    if (pkName != null)
    {
        @:<td>
        @:<a asp-action="Edit" asp-route-id="@@item.@pkName">Edit</a> |
        @:<a asp-action="Details" asp-route-id="@@item.@pkName">Details</a> |
        @:<a asp-action="Delete" asp-route-id="@@item.@pkName">Delete</a>
        @:</td>
    }
    else
    {
        <td>
            @@Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
            @@Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
            @@Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
        </td>
    }
    @:</tr>
    @:}
    @:</tbody>

    @:</table>

    @:</div>
    @:</div>
    @:</div>
    @:</div>
    if(!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(PropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(NavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName + ">";
    }
}